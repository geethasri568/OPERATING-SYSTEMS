#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5

pthread_mutex_t forks[NUM_PHILOSOPHERS];

void *philosopher(void *arg) {
    int id = *((int*) arg);
    int left_fork = id;
    int right_fork = (id + 1) % NUM_PHILOSOPHERS;

    while (1) {
        // Thinking
        printf("Philosopher %d is thinking\n", id);

        // Attempt to pick up left fork
        pthread_mutex_lock(&forks[left_fork]);
        printf("Philosopher %d picked up left fork\n", id);

        // Attempt to pick up right fork
        if (pthread_mutex_trylock(&forks[right_fork]) == 0) {
            // Eat
            printf("Philosopher %d picked up right fork and is eating\n", id);
            usleep(1000000); // Simulating eating time
            printf("Philosopher %d finished eating and put down right fork\n", id);
            pthread_mutex_unlock(&forks[right_fork]);
        } else {
            // Failed to pick up right fork
            printf("Philosopher %d failed to pick up right fork and is putting down left fork\n", id);
            pthread_mutex_unlock(&forks[left_fork]);
        }

        // Put down left fork and think again
        pthread_mutex_unlock(&forks[left_fork]);
    }
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int philosopher_ids[NUM_PHILOSOPHERS];

    // Initialize mutex locks for each fork
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        pthread_mutex_init(&forks[i], NULL);
    }

    // Create philosopher threads
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        philosopher_ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &philosopher_ids[i]);
    }

    // Join philosopher threads (should never reach this point)
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        pthread_join(philosophers[i], NULL);
    }

    // Destroy mutex locks
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        pthread_mutex_destroy(&forks[i]);
    }

    return 0;
}
